colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station))
{
valeur.integree[i,1] <- station[i]
valeur.integree[i,2] <- profondeur[i]
if(nrow(realdata[i,])==0)
{
valeur.integree[i,j+2] <- realdata[i,j]*profondeur[i]
}
else
{
if(profondeur[i] < profondeur[i-1])
{
valeur.integree[i,j+2] <- realdata[i,j]*profondeur[i]
}
else
{
valeur.integree[i,j+2] <- (realdata[i-1,j]+realdata[i,j])*(profondeur[i]-profondeur[i-1])/2
}
}
}
}
return(valeur.integree)
}
integration(bob)
class(bob[,2])
bob[,2] = as.numeric(bob[,2])
integration(bob)
integration=function(data)
{
data = as.data.frame(data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
valeur.integree = matrix(nrow=(length(profondeur)),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station))
{
valeur.integree[i,1] <- station[i]
valeur.integree[i,2] <- profondeur[i]
if(nrow(profondeur[i,])==0)
{
valeur.integree[i,j+2] <- realdata[i,j]*profondeur[i]
}
else
{
if(profondeur[i] < profondeur[i-1])
{
valeur.integree[i,j+2] <- realdata[i,j]*profondeur[i]
}
else
{
valeur.integree[i,j+2] <- (realdata[i-1,j]+realdata[i,j])*(profondeur[i]-profondeur[i-1])/2
}
}
}
}
return(valeur.integree)
}
integration(bob)
integration=function(data)
{
data = as.data.frame(data)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
valeur.integree = matrix(nrow=(length(profondeur)),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station))
{
valeur.integree[i,1] <- station[i+1]
valeur.integree[i,2] <- profondeur[i+1]
if(profondeur[i+1] < profondeur[i])
{
valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
}
else
{
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2
}
}
}
return(valeur.integree)
}
integration(bob)
data = as.data.frame(bob)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
realdata
valeur.integree = matrix(nrow=(length(profondeur)),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station))
{
valeur.integree[i,1] <- station[i+1]
valeur.integree[i,2] <- profondeur[i+1]
if(profondeur[i+1] < profondeur[i])
{
valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
}
else
{
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2
}
}
}
class(profondeur)
profondeur
profondeur[2] < profondeur[1]
profondeur[2] < profondeur[3]
profondeur[2]
profondeur[3]
profondeur[1]
profondeur[3] < profondeur[2]
profondeur[1] / 1000
class(profondeur)
class(profondeur[1])
class(profondeur[2])
1 < 1e8
2 < 1
integration=function(data)
{
data = as.data.frame(data)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
valeur.integree = matrix(nrow=(length(profondeur)),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station)-1)
{
valeur.integree[i,1] <- station[i+1]
valeur.integree[i,2] <- profondeur[i+1]
if(profondeur[i+1] < profondeur[i])
{
valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
}
else
{
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2
}
}
}
return(valeur.integree)
}
integration(bob)
data = as.data.frame(bob)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
profondeur
if(profondeur[i+1] < profondeur[i])
{
valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
}
profondeur[2] < profondeur [1]
profondeur[3] < profondeur [2]
ifelse(profondeur[i+1] < profondeur[i],valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1],
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2)
integration=function(data)
{
data = as.data.frame(data)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
valeur.integree = matrix(nrow=(length(profondeur)),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station)-1)
{
valeur.integree[i,1] <- station[i+1]
valeur.integree[i,2] <- profondeur[i+1]
ifelse(profondeur[i+1] < profondeur[i],valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1],
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2)
{
valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
}
else
{
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2
}
}
}
return(valeur.integree)
}
integration(bob)
rm(integration)
integration=function(data)
{
data = as.data.frame(data)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
valeur.integree = matrix(nrow=(length(profondeur)),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station)-1)
{
valeur.integree[i,1] <- station[i+1]
valeur.integree[i,2] <- profondeur[i+1]
ifelse(profondeur[i+1] < profondeur[i],valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1],
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2)
{
valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
}
else
{
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2
}
}
}
return(valeur.integree)
}
integration=function(data)
{
data = as.data.frame(data)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
valeur.integree = matrix(nrow=(length(profondeur)),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station)-1)
{
valeur.integree[i,1] <- station[i+1]
valeur.integree[i,2] <- profondeur[i+1]
ifelse(profondeur[i+1] < profondeur[i],valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1],
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2)
#{
#  valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
#}
#else
#{
# valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2
#}
}
}
return(valeur.integree)
}
integration(bob)
integration=function(data)
{
data = as.data.frame(data)
dummy <- matrix(1*10^8,nrow=1,ncol=length(data))
data = rbind(dummy,data)
station=data[,1]
profondeur=data[,2]
realdata <- data[,c(3:length(data[1,]))]
valeur.integree = matrix(nrow=(length(profondeur)-1),ncol=(as.numeric(ncol(data))))
colnames(valeur.integree)=c("Station","Depth",paste(colnames(realdata),"int"))
for(j in 1:as.numeric(ncol(realdata)))
{
for(i in 1:length(station)-1)
{
valeur.integree[i,1] <- station[i+1]
valeur.integree[i,2] <- profondeur[i+1]
ifelse(profondeur[i+1] < profondeur[i],valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1],
valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2)
#{
#  valeur.integree[i,j+2] <- realdata[i+1,j]*profondeur[i+1]
#}
#else
#{
# valeur.integree[i,j+2] <- (realdata[i,j]+realdata[i+1,j])*(profondeur[i+1]-profondeur[i])/2
#}
}
}
return(valeur.integree)
}
integration(bob)
bob
bob = rbind(bob,bob)
bob
integration(bob)
int.column = function(data)
{
station <- as.numeric(as.factor(data[,1]))
nstation<-unique(station)
depth <- data[,2]
realdata <- data[,c(3:length(data[1,]))]
SOMME<-t(sapply(nstation,function(x) #Première fonction de calcul
{
DATAx<-subset(data,station==x) #Subset du jeu de données pour calculer en fonction des stations
v <- c(3:length(DATAx[1,])) #vecteur de longueur égale au nombre de colonne
SOMMEy<-sapply(v,function(y) #Création d'une fonction pour calculer par colonne
{
DATAxy <- as.vector(DATAx[,y]) #Création d'un vecteur de la colonne y pour la station x
SOMMEy <- ifelse(sum(DATAxy,na.rm=T) > 0, sum(DATAxy,na.rm=T),NA) #Faire la somme en retirant la NA
return(SOMMEy) #Retourner le résultat de la 2e boucle
})
return(SOMMEy)    #Retourner le même résultat (sortir de la boucle 1)
}))
##############
#Sélection de la profondeur max pour chaque station
Depth <- sapply(nstation,function(z)
{
DATAx<-subset(data,station==z) #Subset du jeu de données pour calculer en fonction des stations
MAXz <- sapply(2,function(z)
{
MAXz <- max(DATAx[,z])
return(MAXz)
})
return(MAXz)
})
#Sélection des numéros de stations pour correspondre aux données
Station <- unique(data[,1])
output <- cbind(Station,Depth,SOMME)
colnames(output)=c("Station","Depth",paste(colnames(realdata),"int"))
return(output) #Retourner encore le résultat (sortir de la fonction principale)
}
int.column(bob)
bob
int.column(integration(bob))
bob2 <- bob[-c(6:10),]
bob2
int.column(bob2)
bob2[5,3] = 1
bob2
int.column(bob2)
bob2[5,2] = 10
int.column(bob2)
bob2[,1] = 1
bob2
int.column(bob2)
integration(bob2)
bob2[1,2]=0
int.column(bob2)
integration(bob2)
BP <- read.table(file.choose())
BP
integration(BP)
row.names(BP,1)
BP <- read.table(file.choose(),header=T)
integration(BP)
BP
source('D:/Université/Script_R/Integration.profil.R')
integration(BP)
integration(bob)
fix(BP)
integration(BP)
int.column(BP)
int.column(BP)[,3]*60
view(BP)
View(BP)
source('D:/Université/Script_R/Reems/R/PARAFAC.cube.design.R')
source('D:/Université/Script_R/Reems/R/read.EEM.Richard.R')
source('D:/Université/Script_R/Reems/R/plot.integrate.RAMAN.R')
source('D:/Université/Script_R/Reems/R/subtract.blank.plot.EEMs.Richard.R')
source('D:/Université/Script_R/Reems/R/plot.eem.go.richard.R')
source('D:/Université/Script_R/Reems/R/myPalette.R')
plot.EEM.go(getwd())
plot.EEM.go(getwd(),PLOT.RAMAN = F,PLOT.BLANK = F,SUBTRACT.BLANK = F,RU=F)
bob = plot.EEM.go(getwd(),PLOT.RAMAN = F,PLOT.BLANK = F,SUBTRACT.BLANK = F,RU=F)
data=c(28,27,26.5,25,24,23.5,26.5,29,25.5,24.5,24.5,26.25,25.25,24.75,27,22.5,27.5,28.5,25,26.5,29,29,27,20.75)
hist(data)
data.norm=data/30*100
hist(data.norm)
shapiro.test(data.norm)
data <- read.table("D:\Université\Chapitre 1- Metabolic balance and DOM buildup during spring bloom",header=TRUE)
data <- read.table(D:\Université\Chapitre 1- Metabolic balance and DOM buildup during spring bloom\R_data.txt,header=TRUE)
data <- read.table(choose.file(),header=TRUE)
data <- read.table(choose.files(),header=TRUE)
data <- read.table(choose.files(),header=TRUE)
view(data)
View(data)
data <- read.table(choose.files(),header=TRUE)
View(data)
data <- read.table(choose.files(),header=TRUE)
View(data)
data <- read.table(choose.files(),header=TRUE)
View(data)
data <- read.table(choose.files(),header=TRUE)
View(data)
data <- read.table(choose.files(),header=TRUE,skip=1)
View(data)
DO <- (data$DOX1+data$DOX2)/2
data$DOX1 = DO
fix(data)
data = data[,-14]
head(data)
data=data[,-2]
library(vegan)
?rda
rda
function(rda)
UseMethod("rda")
UseMethod(rda)
getAnywhere(rda)
Methods(rda)
Method(rda)
UseMethod(rda)
UseMethod("rda")
showMethods(rda)
edit(getAnywhere('rda'), file='source_rda.r')
bob = matrix(c(1,2,3,4,5,1.1,2.2,1.5,.8,.3),nrow=5,ncol=2)
bob
bob2 = as.vector(c(1,3))
bob3 = bob[match(bob[,1],bob2),2]
bob3
bob3 = na.omit(bob[match(bob[,1],bob2),2])
bob3
source('D:/Université/Script_R/N2OWheaton.R')
citation()
CDOMOverlay <- function()
{
require(lattice)
file.data = choose.files(caption="Select CDOM file(s)")
CDOM = list()
for(i in 1:length(file.data))
{
data = read.table(file.data[i],skip=1,header=1,sep=",")
WV <- data[,1]
abs <- data[,2]
CDOM[[i]] = cbind(WV,abs)
}
for(i in 1:length(CDOM))
{
if(i < 9)	  {l.type = "l"}
if(i >= 9 & i < 17)	  {l.type = "p"}
if(i >= 17 & i < 25)	  {l.type = "c"}
CDOM.temp = CDOM[[i]][,2]
if(i==1)
{
plot(CDOM.temp~CDOM[[i]][,1],xlim=c(190,900),ylim=c(0,3),type=l.type,col=i,bg=i,main="")
}
else
{
lines(CDOM.temp~CDOM[[i]][,1], type=l.type, col =i,bg=i)
}
}
}
CDOMOverlay
CDOMOverlay()
CDOMOverlay <- function()
{
require(lattice)
file.data = choose.files(caption="Select CDOM file(s)")
CDOM = list()
for(i in 1:length(file.data))
{
data = read.table(file.data[i],skip=1,header=1,sep=",")
WV <- data[,1]
abs <- data[,2]
CDOM[[i]] = cbind(WV,abs)
}
for(i in 1:length(CDOM))
{
CDOM.temp = CDOM[[i]][,2]
if(i==1)
{
plot(CDOM.temp~CDOM[[i]][,1],xlim=c(190,900),ylim=c(0,3),main="")
}
else
{
lines(CDOM.temp~CDOM[[i]][,1])
}
}
}
CDOMOverlay()
CDOMOverlay <- function()
{
require(lattice)
file.data = choose.files(caption="Select CDOM file(s)")
CDOM = list()
for(i in 1:length(file.data))
{
data = read.table(file.data[i],skip=1,header=1,sep=",")
WV <- data[,1]
abs <- data[,2]
CDOM[[i]] = cbind(WV,abs)
}
for(i in 1:length(CDOM))
{
CDOM.temp = CDOM[[i]][,2]
if(i==1)
{
plot(CDOM.temp~CDOM[[i]][,1],xlim=c(190,900),ylim=c(0,3),type="l",main="")
}
else
{
lines(CDOM.temp~CDOM[[i]][,1])
}
}
}
setwd("D:/Université/GitHub/Paysage-brassicole/CDOM")
getwd()
