{
if(length(file.data)==1)
{
EEM = read.EEM.Richard(file.data,excitation,emission, EMCOL, counter, split=split)
data.list[[index + 1]] = EEM$EEM.list
filename[[index + 1]] = unlist(EEM$EEM.name)
index = index + 1
list.length = list.length + counter
}
}
counter = counter + 1
}
cube <- array(unlist(data.list),dim=c(nex,nem,list.length))
if(Subtract.Blank)
{
Raman = NanoMean(path, excitation, emission, EMCOL,RU=T, split=split)
for(k in 1:length(cube[1,1,]))
{
cube[,,k] <- cube[,,k]- Raman[[1]]$eem[,,1]
}
}
if(Inner)
{
cube = InnerFilter(path, cube, excitation, emission, pathlength)
}
if(rm.corner)
for(k in 1:length(cube[1,1,]))
{
for(i in 1:length(cube[,1,1]))
{
cube[i,wlem<=(wlex[i]-10),k]=0 #Put all data below 1st order Rayleigh equal 0
}
}
if(RU)
{
if(Subtract.Blank == F)
{
Raman = NanoMean(path, excitation, emission, EMCOL, split=split,RU=T)
}
RAMANInt = plot.integrate.RAMAN(Raman, maxF, graph=F)
cube.RU=cube
for(k in 1:length(cube[1,1,]))
{
cube.RU[,,k] <- cube[,,k]/RAMANInt
}
if(EmEx.cor)
{
file.Em = read.csv("../Emcorr_220 to 600.csv")
file.Ex = read.csv("../Excorr.csv")
Ex.cor = as.numeric(na.omit(file.Ex[match(round(file.Ex[,1]),wlex),2]))
Em.cor = t(as.numeric(na.omit(file.Em[match(round(file.Em[,1]),wlem),2])))
Cor.mat = Ex.cor %*% Em.cor
cube.RU.EmEx = cube.RU
for(k in 1:length(cube.RU[1,1,]))
{
cube.RU.EmEx[,,k] = cube.RU[,,k] * Cor.mat
return(list(cube.RU.EmEx,filename,nex,nem,list.length))
}
return(list(cube.RU,filename,nex,nem,list.length))
}
if(EmEx.cor)
{
file.Em = read.csv("../Emcorr_220 to 600.csv")
file.Ex = read.csv("../Excorr.csv")
Ex.cor = as.numeric(na.omit(file.Ex[match(round(file.Ex[,1]),wlex),2]))
Em.cor = t(as.numeric(na.omit(file.Em[match(round(file.Em[,1]),wlem),2])))
Cor.mat = Ex.cor %*% Em.cor
cube.EmEx = cube
for(k in 1:length(cube[1,1,]))
{
cube.EmEx[,,k] = cube[,,k] * Cor.mat
}
return(list(cube.EmEx,filename,nex,nem,list.length))
}
return(list(cube,filename,nex,nem,list.length))
}
}
wlex <- seq(excitation[1], excitation[2], excitation[3])
wlem <- seq(emission[1], emission[2], emission[3])
nex <- length(wlex)
nem  <- length(wlem)
setwd(".\\data")
file.dir = list.files()
nano.temp = grep("nano", file.dir)
cdom.temp = grep("CDOM",file.dir)
file.dir = file.dir[-nano.temp]
file.dir = file.dir[-cdom.temp]
file.list = list()
for(i in 1:length(file.dir))
{
file.list[[i]] = paste(file.dir[i],"/",list.files(file.dir[i]),sep="")
}
file.list = unlist(file.list)
csv.count <- str_count(file.list,"_") + 1
file.sample = file.list[csv.count==1]
file.sample2 = file.list[csv.count==2]
file.sample3 = file.list[csv.count==3]
file.sample4 = file.list[csv.count==4]
#Reading the sample files and creating a list of EEMs
counter = 1
data.list <- list()
filename <- list()
index = 0
list.length = 0
while(counter <= samplepercsv)
{
if(counter == 1)
{
file.data <- file.sample
}
if(counter == 2)
{
file.data <- file.sample2
}
if(counter == 3)
{
file.data <- file.sample3
}
if(counter == 4)
{
file.data <- file.sample4
}
if(length(file.data) > 1)
{
for (i in 1:length(file.data))
{
EEM = read.EEM.Richard(file.data[i],excitation,emission, EMCOL, counter, split=split)
data.list[[i + index]] <- EEM$EEM.list
filename[[i + index]] <- unlist(EEM$EEM.name)
}
index = index + length(file.data)
list.length = list.length + length(file.data) * counter
}
else
{
if(length(file.data)==1)
{
EEM = read.EEM.Richard(file.data,excitation,emission, EMCOL, counter, split=split)
data.list[[index + 1]] = EEM$EEM.list
filename[[index + 1]] = unlist(EEM$EEM.name)
index = index + 1
list.length = list.length + counter
}
}
counter = counter + 1
}
cube <- array(unlist(data.list),dim=c(nex,nem,list.length))
if(Subtract.Blank)
{
Raman = NanoMean(path, excitation, emission, EMCOL,RU=T, split=split)
for(k in 1:length(cube[1,1,]))
{
cube[,,k] <- cube[,,k]- Raman[[1]]$eem[,,1]
}
}
if(Inner)
{
cube = InnerFilter(path, cube, excitation, emission, pathlength)
}
if(rm.corner)
for(k in 1:length(cube[1,1,]))
{
for(i in 1:length(cube[,1,1]))
{
cube[i,wlem<=(wlex[i]-10),k]=0 #Put all data below 1st order Rayleigh equal 0
}
}
if(RU)
{
if(Subtract.Blank == F)
{
Raman = NanoMean(path, excitation, emission, EMCOL, split=split,RU=T)
}
RAMANInt = plot.integrate.RAMAN(Raman, maxF, graph=F)
cube.RU=cube
for(k in 1:length(cube[1,1,]))
{
cube.RU[,,k] <- cube[,,k]/RAMANInt
}
if(EmEx.cor)
{
file.Em = read.csv("../Emcorr_220 to 600.csv")
file.Ex = read.csv("../Excorr.csv")
Ex.cor = as.numeric(na.omit(file.Ex[match(round(file.Ex[,1]),wlex),2]))
Em.cor = t(as.numeric(na.omit(file.Em[match(round(file.Em[,1]),wlem),2])))
Cor.mat = Ex.cor %*% Em.cor
cube.RU.EmEx = cube.RU
for(k in 1:length(cube.RU[1,1,]))
{
cube.RU.EmEx[,,k] = cube.RU[,,k] * Cor.mat
return(list(cube.RU.EmEx,filename,nex,nem,list.length))
}
return(list(cube.RU,filename,nex,nem,list.length))
}
if(EmEx.cor)
{
file.Em = read.csv("../Emcorr_220 to 600.csv")
file.Ex = read.csv("../Excorr.csv")
Ex.cor = as.numeric(na.omit(file.Ex[match(round(file.Ex[,1]),wlex),2]))
Em.cor = t(as.numeric(na.omit(file.Em[match(round(file.Em[,1]),wlem),2])))
Cor.mat = Ex.cor %*% Em.cor
cube.EmEx = cube
for(k in 1:length(cube[1,1,]))
{
cube.EmEx[,,k] = cube[,,k] * Cor.mat
}
return(list(cube.EmEx,filename,nex,nem,list.length))
}
return(list(cube,filename,nex,nem,list.length))
}
cube=PARAFAC.cube.design(getwd(),Inner=F)
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
cube=PARAFAC.cube.design(getwd(),Inner=F)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4,Inner=F)
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4,Inner=F)
cube[[2]]
unlist(cube[[2]])
name.ref=filename
filename = unlist(name.ref)
require(stringdist)
x = do.call(rbind,strsplit(file.data, ".",fixed=T))[,2]
stringdist(filename,x)
stringdist(filename[1],x)
x
x = do.call(rbind,strsplit(file.data, ".",fixed=T))[,2]
file.dir = list.files()
nano.temp = grep("nano", file.dir)
fdom.temp = grep("FDOM",file.dir)
file.dir = file.dir[-nano.temp]
file.dir = file.dir[-fdom.temp]
file.list = list()
for(i in 1:length(file.dir))
{
file.list[[i]] = paste(file.dir[i],"/",list.files(file.dir[i]),sep="")
}
file.data = unlist(file.list)
x = do.call(rbind,strsplit(file.data, ".",fixed=T))[,2]
stringdist(filename[1],x)
stringdist(filename,x)
stringdist(filename[1],x)
target-filenmae[1]
target=filenmae[1]
target=filename[1]
source=x
stringdist(targer,source))
stringdist(targer,source)
stringdist(target,source)
which.min(stringdist(target,source))
index=which.min(stringdist(target,source))
min=min(stringdist(target,source))
dist=min(stringdist(target,source))
index=which.min(dist)
index
min=dist[index]
min
index
if(dist[index]=0)print(paste("Dist was",dist[index],"for",target,source[index]))
if(dist[index]==0)print(paste("Dist was",dist[index],"for",target,source[index]))
if(dist[index]>0)print(paste("Dist was",dist[index],"for",target,source[index]))
selectMinStringDist <- function(target,source)
{
dist=min(stringdist(target,source))
index=which.min(dist)
if(dist[index]>0)print(paste("Dist was",dist[index],"for",target,source[index]))
return(c(dist,index))
}
apply(filename,1,	selectMinStringDist(x,source))
selectMinStringDist <- function(target,source)
{
dist=min(stringdist(target,source))
index=which.min(dist)
if(dist[index]>0)print(paste("Dist was",dist[index],"for",target,source[index]))
return(c(dist,index))
}
apply(filename,1,	selectMinStringDist(x,source))
y = do.call(rbind,strsplit(file.data, ".",fixed=T))[,2]
apply(filename,1,	selectMinStringDist(x,y))
selectMinStringDist
selectMinStringDist(filename[1],y)
return(c(index))
selectMinStringDist <- function(target,source)
{
dist=min(stringdist(target,source))
index=which.min(dist)
if(dist[index]>0)print(paste("Dist was",dist[index],"for",target,source[index]))
return(c(index))
}
apply(filename,1,	selectMinStringDist(x,y))
filename
apply(as.matrix(filename),1,	selectMinStringDist(x,y))
as.matrix(filename)
apply(filename,1,	selectMinStringDist,source=y)
sapply(filename,	selectMinStringDist,source=y)
stringdist(target,source)
apply(as.matrix(filename),1,	selectMinStringDist,source=y)
apply(as.matrix(filename),2,	selectMinStringDist,source=y)
target=filename[5]
target
dist=min(stringdist(target,source))
dist
source
dist=stringdist(target,source)
dist
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source)
index=which.min(dist)
if(dist[index]>0)print(paste("Dist was",dist[index],"for",target,source[index]))
return(c(index))
}
apply(as.matrix(filename),2,	selectMinStringDist,source=y)
target=filename[5]
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source)
index=which.min(dist)
if(dist[index]>0)print(paste("Dist was",dist[index],"for",target,source[index]))
return(c(index))
}
apply(as.matrix(filename),1,	selectMinStringDist,source=y)
sapply(filename,	selectMinStringDist,source=y)
index=sapply(filename,	selectMinStringDist,source=y)
cinbd(y[index],filename)
cbind(y[index],filename)
file.data=y[index]
file.data
file.data = unlist(file.list)
file.data
y=file.data
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source)
index=which.min(dist)
if(dist[index]>0)print(paste("Dist was",dist[index],"for",target,source[index]))
return(c(index))
}
index=sapply(filename,	selectMinStringDist,source=y)
file.data=y[index]
file.data
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source)
index=which.min(dist)
if((dist[index]-12)>0)print(paste("Dist was",dist[index],"for",target,source[index]))
return(c(index))
}
index=sapply(filename,	selectMinStringDist,source=y)
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source)
index=which.min(dist)
if((dist[index]-12)>0)print(paste("Dist was",dist[index]-12,"for",target,source[index]))
return(c(index))
}
index=sapply(filename,	selectMinStringDist,source=y)
y
filename
stringdist("BlondeAchouffe100","CDOM/15.BlondeAchouffe.txt")
stringdist("BlondeAchouffe","CDOM/15.BlondeAchouffe.txt")
stringdist("BlondeAchouffe100x","CDOM/15.BlondeAchouffe.txt")
stringdist("BlondeAchouffex","CDOM/15.BlondeAchouffe.txt")
stringdist("BlondeAchouffexxxxxxxxx","CDOM/15.BlondeAchouffe.txt")
stringdist()
?stringdist()
stringdist("BlondeAchouffe100","CDOM/15.BlondeAchouffe.txt",method="lv")
stringdist("BlondeAchouffe100","CDOM/15.BlondeAchouffe.txt",method="dl")
stringdist("BlondeAchouffe100","CDOM/15.BlondeAchouffe.txt",method="hamming")
stringdist("BlondeAchouffe100","CDOM/15.BlondeAchouffe.txt",method="lcs")
stringdist("BlondeAchouffe","CDOM/15.BlondeAchouffe.txt",method="lcs")
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source,method="lcs")
index=which.min(dist)
if((dist[index]-12)>0)print(paste("Dist was",dist[index]-12,"for",target,source[index]))
return(c(index))
}
index=sapply(filename,	selectMinStringDist,source=y)
cbind(file.data,filename)
file.data = unlist(file.list)
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source,method="lcs")
index=which.min(dist)
if((dist[index]-12)>0)print(paste("Dist was",dist[index]-12,"for",target,source[index]))
return(c(index))
}
stringdist("BlondeAchouffe","CDOM/15.BlondeAchouffe.txt",method="lcs")
index=sapply(filename,	selectMinStringDist,source=file.data)
file.data=y[index]
file.data = unlist(file.list)
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source,method="lcs")
index=which.min(dist)
if((dist[index]-12)>0)print(paste("Dist was",dist[index]-12,"for",target,source[index]))
return(c(index))
}
index=sapply(filename,	selectMinStringDist,source=file.data)
file.data=file.data[index]
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
require(stringdist)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4,Inner=F)
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
require(stringdist)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4,Inner=F)
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
require(stringdist)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4,Inner=F)
warnings()
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
require(stringdist)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4,Inner=F)
warnings()
paste("Dist was",dist[index]-12,"for",target,source[index])
index
index=5
paste("Dist was",dist[index]-12,"for",target,source[index])
selectMinStringDist <- function(target,source)
{
dist=stringdist(target,source,method="lcs")
index=which.min(dist)
if((dist[index]-12)>0)warning(paste("Dist was",dist[index]-12,"for",target,source[index]))
return(c(index))
}
index=sapply(filename,	selectMinStringDist,source=file.data)
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
require(stringdist)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4,Inner=F)
setwd("..")
source('Analyse & script R/myPalette.R')
source('Analyse & script R/NanoMean.R')
source('Analyse & script R/InnerFilter.R')
source('Analyse & script R/PARAFAC.cube.design.R')
source('Analyse & script R/plot.eem.go.richard.R')
source('Analyse & script R/plot.integrate.RAMAN.R')
source('Analyse & script R/read.EEM.Richard.R')
source('Analyse & script R/subtract.blank.plot.EEMs.Richard.R')
source('Analyse & script R/plot.integrate.RAMAN.go.R')
require(stringr)
require(stringdist)
cube=PARAFAC.cube.design(getwd(),samplepercsv = 4)
